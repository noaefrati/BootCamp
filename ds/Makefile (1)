CC = gcc
CFLAGS = -ansi -pedantic-errors -Wall -Wextra -g -fpic -I include 
LDFLAGS = -L/home/mshurin/Desktop/make_file_solutions/lib -Wl,-rpath=/home/mshurin/Desktop/make_file_solutions/lib
OBJS = $(patsubst src/%.c,obj/%.o,$(wildcard src/*.c))
RELEASE_OBJS = $(patsubst src/%.c,obj/%_release.o,$(wildcard src/*.c))
TARGETS = $(patsubst test/%_test.c,%,$(wildcard test/*.c))
TESTOBJS = $(patsubst test/%.c,obj/%.o,$(wildcard test/*.c))
RELEASE_FLAGS = -ansi -pedantic-errors -Wall -Wextra -DNDEBUG -O3 -I include
DEBUGLIB = lib/libds.so
RELEASELIB = lib/libds_release.so
.SECONDARY:
.PHONY: all test debug release clean

all : debug release
test: debug $(TARGETS)
debug : $(DEBUGLIB)
release : CFLAGS = $(RELEASE_FLAGS)
release : $(RELEASELIB)

%: obj/%_test.o
	$(CC) $(CFLAGS) $(LDFLAGS) $^ $(DEBUGLIB) -o $@ -lm 

$(DEBUGLIB): $(OBJS)
	$(CC) -shared $^ -o $@

$(RELEASELIB): $(RELEASE_OBJS)
	$(CC) -shared $^ -o $@

obj/%.o: src/%.c
	$(CC) $(CFLAGS) -c -MMD $< -o $@ -lm

obj/%_release.o: src/%.c
	$(CC) $(CFLAGS) -c -MMD $< -o $@ -lm

obj/%.o: test/%.c
	$(CC) $(CFLAGS) -c -MMD $< -o $@ -lm

-include $(OBJS:%.o=%.d)
-include $(TESTOBJS:%.o=%.d)



clean:
	rm obj/*.o obj/*.d lib/*.so $(TARGETS)	 
